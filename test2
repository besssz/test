#include <SPI.h>
#include <mcp_can.h>
#include <Canbus.h>
#include <defaults.h>
#include <global.h>
#include <mcp2515.h>
#include <mcp2515_defs.h>
#include <LiquidCrystal.h>

const int SPI_CS_PIN = 10;
MCP_CAN CAN(SPI_CS_PIN);
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

const unsigned int RPM_ID = 0x316;
const unsigned int SPEED_ID = 0x153;

void setup() {
  Serial.begin(115200);

  if (CAN.begin(MCP_STDEXT, CAN_100KBPS, MCP_8MHZ) == CAN_OK) {
    Serial.println("MCP2515 Initialized Successfully!");
  } else {
    Serial.println("Error Initializing MCP2515...");
  }

  if (Canbus.init(CANSPEED_500)) {
    Serial.println("CAN Init ok");
  } else {
    Serial.println("Can't init CAN");
  }

  lcd.begin(16, 2);

  Serial.println("Menu:");
  Serial.println("1. Read Engine RPM");
  Serial.println("2. Read Vehicle Speed");
  Serial.println("3. Clear Error Codes");
  Serial.println("4. Live Streaming");
}

void loop() {
  if (CAN_MSGAVAIL == CAN.checkReceive()) {
    long id;
    unsigned char len;
    unsigned char buf[8];
    CAN.readMsgBuf(&id, &len, buf);
    processData(id, len, buf);
  }

  if (Serial.available() > 0) {
    int option = Serial.parseInt();
    switch (option) {
      case 1:
        requestEngineRpm();
        break;
      case 2:
        requestVehicleSpeed();
        break;
      case 3:
        clearErrorCodes();
        break;
      case 4:
        liveStreaming();
        break;
      default:
        Serial.println("Invalid option. Please try again.");
        break;
    }
  }
}

void processData(long id, unsigned char len, unsigned char* buf) {
  if (id == RPM_ID) {
    int rpm = ((buf[1] << 8) + buf[2]) / 4;

    // Display RPM on the LCD
    lcd.setCursor(0, 0);
    lcd.print("RPM: ");
    lcd.print(rpm);
  } else if (id == SPEED_ID) {
    int speed = buf[3];

    // Display Speed on the LCD
    lcd.setCursor(0, 1);
    lcd.print("Speed: ");
    lcd.print(speed);
    lcd.print(" km/h");
  }
}

void requestEngineRpm() {
  // Send request for engine RPM data
}

void requestVehicleSpeed() {
  // Send request for vehicle speed data
}

void clearErrorCodes() {
  // Send request to clear error codes for all modules
}

void liveStreaming() {
  // Start live streaming feature, periodically request and display data
}
